@using StudentInformationSystem.Data.Models;
@model StudentInformationSystem.Areas.Online.Models.OnlineClassVM

@{ Html.RenderPartial("~/Areas/Base/Views/Shared/_PartialAlert.cshtml"); }

@using (Html.BeginForm())
{
    <div>
        <br />
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(x => x.RepeatPattern);

            <div class="form-group">
                @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.GradeId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.SelectListFor(model => model.GradeId, (Grade x) => x.Id, (Grade x) => x.Section.Code + " - " + x.GradeNo.ToEnumChar(), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.GradeId, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.FromTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.FromTime, new { htmlAttributes = new { @class = "form-control", type = "time" } })
                    @Html.ValidationMessageFor(model => model.FromTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OCR_Id, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.PopUpSelectorFor(model => model.OCR_Id, "Base", "Data", "GetOnliceClassRooms", new { @class = "form-control" }, "Please select an online classroom", null, dspFormat: "{1} - {2} , {3}", hiddenIndices: "0,4")
                    @Html.ValidationMessageFor(model => model.OCR_Id, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.ToTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.ToTime, new { htmlAttributes = new { @class = "form-control", type = "time" } })
                    @Html.ValidationMessageFor(model => model.ToTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.OCR_TeacherId, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.PopUpSelectorFor(model => model.OCR_TeacherId, "Base", "Data", "GetOnliceClassRoomTeachers", new { @class = "form-control" }, "Please select a teacher", new { OCR_ID = Model.OCR_Id }, dspFormat: "{2}", hiddenIndices: "0")
                            @Html.ValidationMessageFor(model => model.OCR_TeacherId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Lesson, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.TextAreaFor(model => model.Lesson, 3, 2, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Lesson, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <hr />
            <div class="pull-right">
                <p>
                    <div class="btn-toolbar">
                        <a id="btnSetRepeat" class="btn btn-default" style="min-width:75px;display:none"><span id="repeatText"></span><i style="margin-left:10px" class="fas fa-caret-down"></i></a>
                        <input type="submit" value="Save" class="btn btn-primary" style="min-width:75px" />
                        <input type="button" value="Cancel" class="btn btn-warning" style="min-width:75px" />
                    </div>
                </p>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}