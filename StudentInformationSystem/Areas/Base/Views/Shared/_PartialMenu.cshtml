@using StudentInformationSystem.Data.Models;

@{
    var lstMenus = Html.GetAccessibleMenus();
    var lstFirst = lstMenus.Where(x => x.ParentMenuId == null).OrderBy(x => x.DisplaySeq).ToList();

    var curArea = HttpContext.Current.Request.RequestContext.RouteData.DataTokens["area"].ToString();
    var curController = HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString();

    Func<Menu, bool> IsCurrentItem = null;
    IsCurrentItem = (item) =>
    {
        try
        {
            if (item.Area == curArea && item.Controller == curController)
                return true;

            if (item.InverseParentMenu.Where(x => IsCurrentItem(x)).Any())
                return true;

            return false;
        }
        catch (Exception)
        {
            return false;
        }
    };
}

@helper ThirdLevel(List<Menu> FullList, int menuID, int level, Func<Menu, bool> IsCurrentItem)
{
    var lst = FullList.Where(x => x.ParentMenuId == menuID && x.IsHidden == false).OrderBy(x => x.DisplaySeq).ToList();

    foreach (var item in lst)
    {
        string IsCur = "", IsFoc = "";
        if (IsCurrentItem(item))
        {
            IsCur = "cur";
            IsFoc = "foc";
        }

        if (item.Type == "I")
        {
            <li class="wraptext @IsCur">
                <a class="@IsCur @IsFoc" href="@Url.Action(item.Action, item.Controller, new { area = item.Area })">
                    @if (item.Icon.IsBlank())
                    {
                        <i class="fas fa-ellipsis-h"></i>
                    }
                    else
                    {
                        <i class="fas fa-@item.Icon"></i>
                    }
                    <span style="margin-left:5px;padding-right:5px;">@item.Text</span>
                </a>
            </li>
        }
        else if (item.Type == "M")
        {
            <li class="sub-menu dropdown-submenu wraptext @IsCur">
                <a href="javascript:;" class="@IsCur">
                    @if (item.Icon.IsBlank())
                    {
                        <i class="fas fa-hand-point-right"></i>
                    }
                    else
                    {
                        <i class="fas fa-@item.Icon"></i>
                    }
                    <span style="margin-left:5px;padding-right:5px;">@item.Text</span>
                    <span class="menu-arrow arrow_carrot-right"></span>
                </a>
                <ul class="">
                    @ThirdLevel(FullList, item.MenuId, level + 1, IsCurrentItem)
                </ul>
            </li>
        }
    }
}

@helper SecondLevel(List<Menu> FullList, int menuID, Func<Menu, bool> IsCurrentItem)
{
    var lst = FullList.Where(x => x.ParentMenuId == menuID && x.IsHidden == false).OrderBy(x => x.DisplaySeq).ToList();

    foreach (var item in lst)
    {
        string IsCur = "", IsFoc = "";
        if (IsCurrentItem(item))
        {
            IsCur = "cur";
            IsFoc = "foc";
        }

        if (item.Type == "I")
        {
            <li class="wraptext @IsCur">
                <a class="@IsCur @IsFoc" href="@Url.Action(item.Action, item.Controller, new { area = item.Area })">
                    @if (item.Icon.IsBlank())
                    {
                        <i class="fas fa-hand-point-right"></i>
                    }
                    else
                    {
                        <i class="@item.Icon"></i>
                    }
                    <span style="margin-left:5px;padding-right:5px;">@item.Text</span>
                </a>
            </li>
        }
        else if (item.Type == "M")
        {
            <li class="sub-menu wraptext @IsCur">
                <a href="javascript:;" class="@IsCur">
                    @if (item.Icon.IsBlank())
                    {
                        <i class="fas fa-hand-point-right"></i>
                    }
                    else
                    {
                        <i class="@item.Icon"></i>
                    }
                    <span style="margin-left:5px;padding-right:5px;">@item.Text</span>
                    <span class="menu-arrow arrow_carrot-right"></span>
                </a>
                <ul class="">
                    @ThirdLevel(FullList, item.MenuId, 3, IsCurrentItem)
                </ul>
            </li>
        }
    }
}

@helper FirstLevel(List<Menu> lstMenus, Func<Menu, bool> IsCurrentItem)
{
    var lstFirst = lstMenus.Where(x => x.ParentMenuId == null).OrderBy(x => x.DisplaySeq).ToList();

    if (lstFirst.Count > 0)
    {
        @*<li class="divider-vertical"></li>*@
    }

    foreach (var item in lstFirst)
    {
        string IsCur = "", IsFoc = "";
        if (IsCurrentItem(item))
        {
            IsCur = "cur";
            IsFoc = "foc";
        }

        if (item.Type == "I")
        {
            <li class="wraptext @IsCur">
                <a class="@IsCur @IsFoc" href="@Url.Action(item.Action, item.Controller, new { area = item.Area })">
                    @if (item.Icon.IsBlank())
                    {
                        <i class="fas fa-infinity"></i>
                    }
                    else
                    {
                        <i class="@item.Icon"></i>
                    }
                    <span style="margin-left:5px;padding-right:5px;">@item.Text</span>
                </a>
            </li>
        }
        else if (item.Type == "M")
        {
            <li class="sub-menu wraptext @IsCur">
                <a href="javascript:;" class="@IsCur" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
                    @if (item.Icon.IsBlank())
                    {
                        <i class="fas fa-infinity"></i>
                    }
                    else
                    {
                        <i class="@item.Icon"></i>
                    }
                    <span style="margin-left:5px;padding-right:5px;">@item.Text</span>
                    @*<span class="menu-arrow arrow_carrot-right"></span>*@
                    <span class="fas fa-angle-right pull-right" style="margin-right:5px"></span>
                </a>
                <ul class="sub">
                    @SecondLevel(lstMenus, item.MenuId, IsCurrentItem)
                </ul>
            </li>
        }

    }
}

<ul class="sidebar-menu">
    @{
        @FirstLevel(lstMenus, IsCurrentItem)
    }
</ul>