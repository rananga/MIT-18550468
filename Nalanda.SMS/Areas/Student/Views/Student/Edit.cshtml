@model Nalanda.SMS.Areas.Student.Models.StudentVM

@{
    ViewBag.Title = "Edit Student Admission";
}

@using (Html.BeginForm("Edit", "Student", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal stud-image-container">
    <hr />
    <p>
        <input type="submit" value="Save" class="btn btn-primary" style="min-width:75px" />
    </p>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.RowVersion)
    @Html.HiddenFor(model => model.ImagePath)

    <div class="stud-image stud-image-file" style="display:none">
        <div style="position:relative">
            <img class="btn" src="@Html.ActionUrl("GetPic", routeValues: new { id = Model.Id })" height="210" style="padding:0 0 35px 0" />
            <div style="position:absolute;right:0px; bottom:0px">
                <input class="form-control" type="file" name="ProfilePic" id="ProfilePic" />
            </div>
        </div>
    </div>

    <div class="stud-image stud-image-cam">
        <div id="my_camera" style="display:none"></div>
        <div style="text-align:center;width:240px">
            <img id="imgPic" class="btn" src="@Html.ActionUrl("GetPic", routeValues: new { id = Model.Id })" style="height:180px;" />
        </div>
        <div class="btn-toolbar" style="min-width:240px;margin-top:5px;text-align:center;">
            <input type="button" id="btnCam" class="btn btn-success" style="min-width:75px; float:none" data-mode="R" value="RETAKE" />
            <input type="button" id="btnCancel" class="btn btn-danger" style="min-width:75px; float:none; display:none" value="CANCEL" />
        </div>
    </div>

    <br />
    <div class="form-group">
        @Html.LabelFor(model => model.IndexNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.IndexNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.IndexNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AdmissionDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.AdmissionDate, new { htmlAttributes = new { @class = "form-control", type = "JQ-date" } })
            @Html.ValidationMessageFor(model => model.AdmissionDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Dob, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Dob, new { htmlAttributes = new { @class = "form-control", type = "JQ-date" } })
            @Html.ValidationMessageFor(model => model.Dob, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Initials, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Initials, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Initials, "", new { @class = "text-danger" })
        </div>
        @Html.LabelFor(model => model.Lname, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Lname, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Lname, "", new { @class = "text-danger" })
        </div>
    </div>
    <br />
    <div class="form-group">
        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
        </div>
    </div>
    <br />
    <div class="form-group">
        @Html.LabelFor(model => model.EmergencyConName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.EmergencyConName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmergencyConName, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmergencyContactTel, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.EmergencyContactTel, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmergencyContactTel, "", new { @class = "text-danger" })
        </div>
    </div>

    @{

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EnumEditorFor(model => model.Status, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.InactiveReason, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.InactiveReason, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InactiveReason, "", new { @class = "text-danger" })
            </div>
        </div>

    }


    <div class="form-group">
        @Html.LabelFor(model => model.IsLeavingIssued, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.CheckBoxFor(model => model.IsLeavingIssued, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.IsLeavingIssued, "", new { @class = "text-danger" })
        </div>
    </div>

    <br />

</div>
}

<div class="ChildContent">

    @{ Html.RenderAction("FamilyIndex", new { id = Model.Id, isToEdit = true }); }
</div>
<div class="ChildContent">
    @{ Html.RenderAction("ChildIndex", new { id = Model.Id, isToEdit = true }); }
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/student/enrollment")
}

<script src="~/Scripts/webcam.js"></script>
<script>
    var objMyCam = $('#my_camera');
    var objBtnCam = $('#btnCam');
    var objBtnCancel = $('#btnCancel');
    var objPic = $('#imgPic');

    objPic.data("org-src", objPic.attr("src"));

    Webcam.set({
        width: 240,
        height: 180,
        dest_width: 640,
        dest_height: 480,
        image_format: 'jpeg',
        jpeg_quality: 90,
        force_flash: false,
        flip_horiz: true,
        fps: 45
    });

    objBtnCam.click(function () {
        if (objBtnCam.data("mode") == "R") {
            objPic.hide();
            objMyCam.show();
            Webcam.attach('#my_camera');
            objBtnCancel.show();
            objBtnCam.val("CAPTURE");
            objBtnCam.data("mode", "C");
        }
        else {
            Webcam.snap(function (data_uri) {
                $.ajax({
                    url: AppRoot + "Student/Student/UploadPicStr",
                    type: "POST",
                    data: { imgString: data_uri },
                    success: function (result) {
                        objPic.attr("src", objPic.data("org-src") + "?timestamp=" + new Date().getTime());
                        objPic.show();
                    },
                    error: function (data, status, jqXHR) {
                        if (IsJson(data.responseText)) { AlertIt("ERROR: " + JSON.parse(data.responseText).Message); }
                        else { AlertIt("ERROR: " + data.statusText); }
                    }
                });
                objProg.hide();
                Webcam.reset();
                objMyCam.hide();
            });
            objBtnCancel.hide();
            objBtnCam.val("RETAKE");
            objBtnCam.data("mode", "R");
        }
    });

    objBtnCancel.click(function () {
        objMyCam.hide();
        objBtnCancel.hide();
        objPic.show();
        objBtnCam.data("mode", "R");
    });
</script>