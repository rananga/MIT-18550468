// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentInformationSystem.Data;

namespace StudentInformationSystem.Data.Migrations
{
    [DbContext(typeof(dbNalandaContext))]
    [Migration("20210701091418_02")]
    partial class _02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_Monitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CR_Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CR_Id");

                    b.HasIndex("StudentId");

                    b.ToTable("CR_Monitors");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CR_Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CR_Id");

                    b.HasIndex("StudentId");

                    b.ToTable("CR_Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4
                        },
                        new
                        {
                            Id = 5,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 5
                        },
                        new
                        {
                            Id = 6,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 6
                        },
                        new
                        {
                            Id = 7,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 7
                        },
                        new
                        {
                            Id = 8,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 8
                        },
                        new
                        {
                            Id = 9,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 9
                        },
                        new
                        {
                            Id = 10,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 10
                        },
                        new
                        {
                            Id = 11,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 11
                        },
                        new
                        {
                            Id = 12,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 12
                        },
                        new
                        {
                            Id = 13,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 13
                        },
                        new
                        {
                            Id = 14,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 14
                        },
                        new
                        {
                            Id = 15,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 15
                        },
                        new
                        {
                            Id = 16,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 16
                        },
                        new
                        {
                            Id = 17,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 17
                        },
                        new
                        {
                            Id = 18,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 18
                        },
                        new
                        {
                            Id = 19,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 19
                        },
                        new
                        {
                            Id = 20,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 20
                        },
                        new
                        {
                            Id = 21,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 21
                        },
                        new
                        {
                            Id = 22,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 22
                        },
                        new
                        {
                            Id = 23,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 23
                        },
                        new
                        {
                            Id = 24,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 24
                        },
                        new
                        {
                            Id = 25,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 25
                        },
                        new
                        {
                            Id = 26,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 26
                        },
                        new
                        {
                            Id = 27,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 27
                        },
                        new
                        {
                            Id = 28,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 28
                        },
                        new
                        {
                            Id = 29,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 29
                        },
                        new
                        {
                            Id = 30,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 30
                        },
                        new
                        {
                            Id = 31,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 31
                        },
                        new
                        {
                            Id = 32,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 32
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_StudentSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CR_StudentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CR_StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("CR_StudentSubjects");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_StudentSubjectMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CR_StudentSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CR_StudentSubjectId");

                    b.ToTable("CR_StudentSubjectMarks");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CR_Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CR_Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubjectId");

                    b.ToTable("CR_Subjects");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CR_Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CR_Id");

                    b.HasIndex("StaffId");

                    b.ToTable("CR_Teachers");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("GradeClassId")
                        .HasColumnType("int");

                    b.Property<int>("Medium")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassRooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeClassId = 1,
                            Medium = 0,
                            Year = 2021
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.ExtraActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ExtraActivities");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.ExtraActivityAcheivement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ExtraActivityAcheivements");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.ExtraActivityPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ExtraActivityPositions");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradeNo")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 1,
                            SectionId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 2,
                            SectionId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 3,
                            SectionId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 4,
                            SectionId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 5,
                            SectionId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 6,
                            SectionId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 7,
                            SectionId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 8,
                            SectionId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 9,
                            SectionId = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 10,
                            SectionId = 3
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeNo = 11,
                            SectionId = 3
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.GradeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxStudentCount")
                        .HasColumnType("int");

                    b.Property<int>("Medium")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.ToTable("GradeClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1.A",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeId = 1,
                            Medium = 0,
                            Name = 1
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.GradeClassSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("GradeClassId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("GradeClassSubjects");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.GradeHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("StaffId");

                    b.ToTable("GradeHeads");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.GradeSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("GradeSubjects");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.LeavingCertificate", b =>
                {
                    b.Property<int>("LeavCertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Conduct")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLeaving")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StudId")
                        .HasColumnType("int");

                    b.HasKey("LeavCertId");

                    b.HasIndex("StudId")
                        .HasName("IX_FK_StudentLeavingCertificate");

                    b.ToTable("LeavingCertificates");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplaySeq")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuId");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            DisplaySeq = 10,
                            Icon = "fas fa-user-tie",
                            IsHidden = false,
                            Text = "Admin",
                            Type = "M"
                        },
                        new
                        {
                            MenuId = 2,
                            DisplaySeq = 20,
                            Icon = "fas fa-book-reader",
                            IsHidden = false,
                            Text = "Academic",
                            Type = "M"
                        },
                        new
                        {
                            MenuId = 3,
                            DisplaySeq = 30,
                            Icon = "fas fa-chalkboard-teacher",
                            IsHidden = false,
                            Text = "Teacher",
                            Type = "M"
                        },
                        new
                        {
                            MenuId = 4,
                            DisplaySeq = 40,
                            Icon = "fas fa-user-graduate",
                            IsHidden = false,
                            Text = "Student",
                            Type = "M"
                        },
                        new
                        {
                            MenuId = 5,
                            DisplaySeq = 50,
                            Icon = "fas fa-laptop-code",
                            IsHidden = false,
                            Text = "Online",
                            Type = "M"
                        },
                        new
                        {
                            MenuId = 6,
                            DisplaySeq = 60,
                            Icon = "fas fa-chart-bar",
                            IsHidden = false,
                            Text = "Report",
                            Type = "M"
                        },
                        new
                        {
                            MenuId = 7,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "UserPermission",
                            DisplaySeq = 10,
                            IsHidden = false,
                            ParentMenuId = 1,
                            Text = "User Permissions",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 8,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "Users",
                            DisplaySeq = 20,
                            IsHidden = false,
                            ParentMenuId = 1,
                            Text = "Users",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 9,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "StaffMember",
                            DisplaySeq = 30,
                            IsHidden = false,
                            ParentMenuId = 1,
                            Text = "Staff Members",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 10,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "Section",
                            DisplaySeq = 40,
                            IsHidden = false,
                            ParentMenuId = 1,
                            Text = "Sections",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 11,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "SectionHead",
                            DisplaySeq = 50,
                            IsHidden = false,
                            ParentMenuId = 1,
                            Text = "Section Heads",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 12,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "Grade",
                            DisplaySeq = 60,
                            IsHidden = false,
                            ParentMenuId = 1,
                            Text = "Grades",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 13,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "GradeHead",
                            DisplaySeq = 70,
                            IsHidden = false,
                            ParentMenuId = 1,
                            Text = "Grade Heads",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 14,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "ExtraActivity",
                            DisplaySeq = 80,
                            IsHidden = false,
                            ParentMenuId = 1,
                            Text = "Extra Activities",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 15,
                            Action = "Index",
                            Area = "Academic",
                            Controller = "SubjectCategory",
                            DisplaySeq = 10,
                            IsHidden = false,
                            ParentMenuId = 2,
                            Text = "Subject Categories",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 16,
                            Action = "Index",
                            Area = "Academic",
                            Controller = "Subject",
                            DisplaySeq = 20,
                            IsHidden = false,
                            ParentMenuId = 2,
                            Text = "Subjects",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 17,
                            Action = "Index",
                            Area = "Academic",
                            Controller = "GradeSubject",
                            DisplaySeq = 30,
                            IsHidden = false,
                            ParentMenuId = 2,
                            Text = "Grade Subjects",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 18,
                            Action = "Index",
                            Area = "Academic",
                            Controller = "GradeClass",
                            DisplaySeq = 40,
                            IsHidden = false,
                            ParentMenuId = 2,
                            Text = "Grade Classes",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 19,
                            Action = "Index",
                            Area = "Academic",
                            Controller = "ClassRoom",
                            DisplaySeq = 50,
                            IsHidden = false,
                            ParentMenuId = 2,
                            Text = "Physical Class Rooms",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 20,
                            Action = "Index",
                            Area = "Teacher",
                            Controller = "Teacher",
                            DisplaySeq = 20,
                            IsHidden = false,
                            ParentMenuId = 3,
                            Text = "Teacher Information",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 21,
                            Action = "Index",
                            Area = "Student",
                            Controller = "Student",
                            DisplaySeq = 10,
                            IsHidden = false,
                            ParentMenuId = 4,
                            Text = "Student Maintenance",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 22,
                            Action = "Index",
                            Area = "Student",
                            Controller = "BasketSubject",
                            DisplaySeq = 20,
                            IsHidden = false,
                            ParentMenuId = 4,
                            Text = "Student Basket Subjects",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 23,
                            Action = "Index",
                            Area = "Student",
                            Controller = "StudentMark",
                            DisplaySeq = 30,
                            IsHidden = false,
                            ParentMenuId = 4,
                            Text = "Student Marks",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 24,
                            Action = "Index",
                            Area = "Online",
                            Controller = "OnlineClassRoom",
                            DisplaySeq = 30,
                            IsHidden = false,
                            ParentMenuId = 5,
                            Text = "Online Class Rooms",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 25,
                            Action = "Index",
                            Area = "Online",
                            Controller = "OnlineTimeTable",
                            DisplaySeq = 30,
                            IsHidden = false,
                            ParentMenuId = 5,
                            Text = "Online Time Table",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 26,
                            Action = "Process",
                            Area = "Report",
                            Controller = "StudentAttendance",
                            DisplaySeq = 30,
                            IsHidden = false,
                            ParentMenuId = 6,
                            Text = "Student Attendance",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 27,
                            Action = "Process",
                            Area = "Report",
                            Controller = "StudentMarks",
                            DisplaySeq = 30,
                            IsHidden = false,
                            ParentMenuId = 6,
                            Text = "Term Wise Student Marks",
                            Type = "I"
                        },
                        new
                        {
                            MenuId = 28,
                            Action = "Process",
                            Area = "Report",
                            Controller = "OnlineSessionsSummary",
                            DisplaySeq = 30,
                            IsHidden = false,
                            ParentMenuId = 6,
                            Text = "Online Sessions Summary",
                            Type = "I"
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OCR_ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CR_Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OCR_Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CR_Id");

                    b.HasIndex("OCR_Id");

                    b.ToTable("OCR_ClassRooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CR_Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OCR_Id = 1
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OCR_Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OCR_Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OCR_Id");

                    b.HasIndex("StaffId");

                    b.ToTable("OCR_Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOwner = true,
                            OCR_Id = 1,
                            StaffId = 1
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OC_Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MeetingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OC_Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("OC_Id");

                    b.ToTable("OC_Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MeetingCode = "MYEWAPPSOO",
                            OC_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MeetingCode = "ASQWCRTUFF",
                            OC_Id = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MeetingCode = "IGIPEICFEK",
                            OC_Id = 3
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OC_MeetingAttendee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OC_MeetingId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TimesVisited")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OC_MeetingId");

                    b.ToTable("OC_MeetingAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 5110L,
                            OC_MeetingId = 1,
                            StudentId = 1,
                            TimesVisited = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 4879L,
                            OC_MeetingId = 2,
                            StudentId = 11,
                            TimesVisited = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 4805L,
                            OC_MeetingId = 3,
                            StudentId = 21,
                            TimesVisited = 4
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OnlineClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CalendarEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<string>("Lesson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OCR_Id")
                        .HasColumnType("int");

                    b.Property<int>("OCR_TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("RepeatPattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("OCR_Id");

                    b.HasIndex("OCR_TeacherId");

                    b.ToTable("OnlineClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            OCR_Id = 1,
                            OCR_TeacherId = 1,
                            ToTime = new TimeSpan(0, 18, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OnlineClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GoogleClassRoomId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleClassrommLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("Medium")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("OnlineClassRooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradeId = 1,
                            Medium = 0,
                            SubjectId = 1,
                            Year = 2021
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            Code = "Admin",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Administrator"
                        },
                        new
                        {
                            PermissionId = 2,
                            Code = "AdminUser",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin Department User"
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.PermissionGradeAccess", b =>
                {
                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("GradeId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionGradeAccesses");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.PermissionMenuAccess", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("MenuId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionMenuAccesses");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Primary",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = ""
                        },
                        new
                        {
                            Id = 2,
                            Code = "Junior",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = ""
                        },
                        new
                        {
                            Id = 3,
                            Code = "Senior",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = ""
                        },
                        new
                        {
                            Id = 4,
                            Code = "AL-Science",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = ""
                        },
                        new
                        {
                            Id = 5,
                            Code = "AL-Art & Commerce",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = ""
                        },
                        new
                        {
                            Id = 6,
                            Code = "AL-Technology",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = ""
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.SectionHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("StaffId");

                    b.ToTable("SectionHeads");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StaffMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmeContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmeContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JoinedDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Nicno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RetiredDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SchoolEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffNumber")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("TelHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId")
                        .IsUnique()
                        .HasFilter("[TeacherId] IS NOT NULL");

                    b.ToTable("StaffMembers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address1 = "24/3, Udyana Avenue",
                            Address2 = "Pepiliyana Road",
                            City = "Nugegoda",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Piumali Manorika Suraweera",
                            Gender = 1,
                            ImmeContactName = "Malith",
                            ImmeContactNo = "0773411392",
                            Initials = "P M",
                            LastName = "Suraweera",
                            MobileNo = "0714479648",
                            Nicno = "880272580V",
                            StaffNumber = 123,
                            Status = 0,
                            Title = 5
                        },
                        new
                        {
                            Id = 2,
                            Address1 = "45C, School Avenue",
                            Address2 = "Raththanapitiya",
                            City = "Boralesgamuwa",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Udara Rathnayaka",
                            Gender = 0,
                            ImmeContactName = "Umandya",
                            ImmeContactNo = "0773412392",
                            Initials = "U",
                            LastName = "Rathnayaka",
                            MobileNo = "0716669648",
                            Nicno = "900272580V",
                            StaffNumber = 456,
                            Status = 0,
                            Title = 5
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AdmittedClassId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime");

                    b.Property<string>("EmergContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndexNo")
                        .HasColumnType("int");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLeavingIssued")
                        .HasColumnType("bit");

                    b.Property<int>("LastClassId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Medium")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SchoolEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdmissionDate = new DateTime(2021, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "A J M T A Jayasundara",
                            IndexNo = 29013,
                            Initials = "A J M T A",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Jayasundara",
                            Medium = 0,
                            SchoolEmail = "29013@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "A U N De Silva",
                            IndexNo = 28953,
                            Initials = "A U N De",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Silva",
                            Medium = 0,
                            SchoolEmail = "28953@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            AdmissionDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "B L R Abedeera",
                            IndexNo = 28948,
                            Initials = "B L R",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Abedeera",
                            Medium = 0,
                            SchoolEmail = "28948@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "B M T Silva",
                            IndexNo = 29043,
                            Initials = "B M T",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Silva",
                            Medium = 0,
                            SchoolEmail = "29043@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "B W K M Peeris",
                            IndexNo = 29028,
                            Initials = "B W K M",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Peeris",
                            Medium = 0,
                            SchoolEmail = "29028@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            AdmissionDate = new DateTime(2021, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Chenuk Manthila P S",
                            IndexNo = 29049,
                            Initials = "Chenuk",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Manthila P S",
                            Medium = 0,
                            SchoolEmail = "29049@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 7,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "D C A Dias",
                            IndexNo = 29023,
                            Initials = "D C A",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Dias",
                            Medium = 0,
                            SchoolEmail = "29023@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "D J M K N Serasingha",
                            IndexNo = 28988,
                            Initials = "D J M K N",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Serasingha",
                            Medium = 0,
                            SchoolEmail = "28988@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "D M K S Liyanage",
                            IndexNo = 28941,
                            Initials = "D M K S",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Liyanage",
                            Medium = 0,
                            SchoolEmail = "28941@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 10,
                            AdmissionDate = new DateTime(2021, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "D M L Dasanayake",
                            IndexNo = 28926,
                            Initials = "D M L",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Dasanayake",
                            Medium = 0,
                            SchoolEmail = "28926@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 11,
                            AdmissionDate = new DateTime(2021, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "D N Gunasena",
                            IndexNo = 28963,
                            Initials = "D N",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Gunasena",
                            Medium = 0,
                            SchoolEmail = "28963@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 12,
                            AdmissionDate = new DateTime(2021, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "D W O D De Silva",
                            IndexNo = 28983,
                            Initials = "D W O D De",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Silva",
                            Medium = 0,
                            SchoolEmail = "28983@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 13,
                            AdmissionDate = new DateTime(2021, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "E H H Nethsara",
                            IndexNo = 28921,
                            Initials = "E H H",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Nethsara",
                            Medium = 0,
                            SchoolEmail = "28921@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 14,
                            AdmissionDate = new DateTime(2021, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "H A S Asmitha",
                            IndexNo = 28896,
                            Initials = "H A S",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Asmitha",
                            Medium = 0,
                            SchoolEmail = "28896@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 15,
                            AdmissionDate = new DateTime(2021, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "H L S Dulsara",
                            IndexNo = 28911,
                            Initials = "H L S",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Dulsara",
                            Medium = 0,
                            SchoolEmail = "28911@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 16,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "I U Roopasingha",
                            IndexNo = 29018,
                            Initials = "I U",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Roopasingha",
                            Medium = 0,
                            SchoolEmail = "29018@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 17,
                            AdmissionDate = new DateTime(2021, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "K A D Sanketh",
                            IndexNo = 28998,
                            Initials = "K A D",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Sanketh",
                            Medium = 0,
                            SchoolEmail = "28998@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 18,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "K A M Menath",
                            IndexNo = 28916,
                            Initials = "K A M",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Menath",
                            Medium = 0,
                            SchoolEmail = "28916@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 19,
                            AdmissionDate = new DateTime(2021, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "L G T S Samarasingha",
                            IndexNo = 28891,
                            Initials = "L G T S",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Samarasingha",
                            Medium = 0,
                            SchoolEmail = "28891@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 20,
                            AdmissionDate = new DateTime(2021, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "M K G Darmasiri",
                            IndexNo = 29033,
                            Initials = "M K G",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Darmasiri",
                            Medium = 0,
                            SchoolEmail = "29033@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 21,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "N H E De Silava",
                            IndexNo = 29038,
                            Initials = "N H E De",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Silava",
                            Medium = 0,
                            SchoolEmail = "29038@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 22,
                            AdmissionDate = new DateTime(2021, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "R V D R R Perera",
                            IndexNo = 28901,
                            Initials = "R V D R R",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Perera",
                            Medium = 0,
                            SchoolEmail = "28901@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 23,
                            AdmissionDate = new DateTime(2021, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "S A J Pathirana",
                            IndexNo = 29008,
                            Initials = "S A J",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Pathirana",
                            Medium = 0,
                            SchoolEmail = "29008@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 24,
                            AdmissionDate = new DateTime(2021, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "S H V Sanith",
                            IndexNo = 29003,
                            Initials = "S H V",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Sanith",
                            Medium = 0,
                            SchoolEmail = "29003@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 25,
                            AdmissionDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "S I Kiriwandeniya",
                            IndexNo = 28973,
                            Initials = "S I",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Kiriwandeniya",
                            Medium = 0,
                            SchoolEmail = "28973@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 26,
                            AdmissionDate = new DateTime(2021, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "S L D Karunathilaka",
                            IndexNo = 28931,
                            Initials = "S L D",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Karunathilaka",
                            Medium = 0,
                            SchoolEmail = "28931@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 27,
                            AdmissionDate = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "S O Leelarathna",
                            IndexNo = 28958,
                            Initials = "S O",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Leelarathna",
                            Medium = 0,
                            SchoolEmail = "28958@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 28,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "S T Ranwala",
                            IndexNo = 28968,
                            Initials = "S T",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Ranwala",
                            Medium = 0,
                            SchoolEmail = "28968@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 29,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "T D A Gunawardana",
                            IndexNo = 28978,
                            Initials = "T D A",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Gunawardana",
                            Medium = 0,
                            SchoolEmail = "28978@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 30,
                            AdmissionDate = new DateTime(2021, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "V A D Dilsara",
                            IndexNo = 28993,
                            Initials = "V A D",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Dilsara",
                            Medium = 0,
                            SchoolEmail = "28993@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 31,
                            AdmissionDate = new DateTime(2021, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "V K Almeda",
                            IndexNo = 28906,
                            Initials = "V K",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Almeda",
                            Medium = 0,
                            SchoolEmail = "28906@nalandacollege.info",
                            Status = 0
                        },
                        new
                        {
                            Id = 32,
                            AdmissionDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmittedClassId = 0,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "W G T M Gamage",
                            IndexNo = 28936,
                            Initials = "W G T M",
                            IsLeavingIssued = false,
                            LastClassId = 0,
                            LastName = "Gamage",
                            Medium = 0,
                            SchoolEmail = "28936@nalandacollege.info",
                            Status = 0
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StudentBasketSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentBasketSubjects");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StudentExtraActivityAcheivement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcheivementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AwardedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcheivementId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExtraActivityAcheivements");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StudentExtraActivityPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExtraActivityPositions");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StudentFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactMob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nicno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeTel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Relationship")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.Property<string>("WorkingAdd")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentFamilies");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StudentSibling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Relationship")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SiblingStudentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSiblings");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Medium")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectCategoryId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Sinhala",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medium = 0,
                            SectionId = 3,
                            SubjectCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "English",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medium = 0,
                            SectionId = 3,
                            SubjectCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "Geography",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medium = 0,
                            SectionId = 3,
                            SubjectCategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            Code = "Dancing",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medium = 0,
                            SectionId = 3,
                            SubjectCategoryId = 3
                        },
                        new
                        {
                            Id = 5,
                            Code = "ICT",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medium = 0,
                            SectionId = 3,
                            SubjectCategoryId = 4
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.SubjectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBasket")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("SubjectCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Main",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsBasket = false
                        },
                        new
                        {
                            Id = 2,
                            Code = "Basket 1",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsBasket = true
                        },
                        new
                        {
                            Id = 3,
                            Code = "Basket 2",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsBasket = true
                        },
                        new
                        {
                            Id = 4,
                            Code = "Basket 3",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsBasket = true
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.TeacherPreferedSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherPreferedSubjects");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.TeacherQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AwardedYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("QualificationType")
                        .HasColumnType("int");

                    b.Property<int>("Remarks")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherQualifications");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.TeacherQualificationSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherQualificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherQualificationId");

                    b.ToTable("TeacherQualificationSubjects");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId")
                        .IsUnique()
                        .HasFilter("[StaffId] IS NOT NULL");

                    b.HasIndex("VisitorId")
                        .IsUnique()
                        .HasFilter("[VisitorId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "1",
                            Status = 1,
                            UserName = "rananga"
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.UserPermission", b =>
                {
                    b.Property<int>("UserPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserPermissionId = 1,
                            PermissionId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Nicno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SchoolEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_Monitor", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.ClassRoom", "ClassRoom")
                        .WithMany("ClassMonitors")
                        .HasForeignKey("CR_Id")
                        .HasConstraintName("FK_Class_ClassMonitors")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Student", "Student")
                        .WithMany("ClassMonitors")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Student_ClassMonitors")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_Student", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.ClassRoom", "ClassRoom")
                        .WithMany("ClassStudents")
                        .HasForeignKey("CR_Id")
                        .HasConstraintName("FK_Class_ClassStudents")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Student", "Student")
                        .WithMany("ClassStudents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Student_ClassStudents")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_StudentSubject", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.CR_Student", "CR_Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("CR_StudentId")
                        .HasConstraintName("FK_ClassStudent_StudentSubjects")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Subject_StudentSubjects")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_StudentSubjectMark", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.CR_StudentSubject", "CR_StudentSubject")
                        .WithMany("ClassStudentSubjectMarks")
                        .HasForeignKey("CR_StudentSubjectId")
                        .HasConstraintName("FK_ClassStudentSubject_ClassStudentSubjectMarks")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_Subject", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.ClassRoom", "ClassRoom")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("CR_Id")
                        .HasConstraintName("FK_Class_ClassSubjects")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.StaffMember", "StaffMember")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffMember_ClassSubjects")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Subject", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Subject_ClassSubjects")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.CR_Teacher", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.ClassRoom", "ClassRoom")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("CR_Id")
                        .HasConstraintName("FK_Class_ClassTeachers")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.StaffMember", "StaffMember")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffMember_ClassTeachers")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.ClassRoom", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.GradeClass", "GradeClass")
                        .WithMany("Classes")
                        .HasForeignKey("GradeClassId")
                        .HasConstraintName("FK_GradeClass_Classes")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Teacher", null)
                        .WithMany("ClassTeachers")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.ExtraActivityAcheivement", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.ExtraActivity", "Activity")
                        .WithMany("Acheivements")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_Activity_Acheivements")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.ExtraActivityPosition", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.ExtraActivity", "Activity")
                        .WithMany("Positions")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_Activity_Positions")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Section", "Section")
                        .WithMany("Grades")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Section_Grades")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Teacher", null)
                        .WithMany("HeadingGrades")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.GradeClass", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Grade", "Grade")
                        .WithMany("GradeClasses")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_Grade_GradeClasses")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.GradeClassSubject", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.GradeClass", "GradeClass")
                        .WithMany("GradeClassSubjects")
                        .HasForeignKey("GradeClassId")
                        .HasConstraintName("FK_GradeClass_GradeClassSubjects")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Subject", "Subject")
                        .WithMany("GradeClassSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Subject_GradeClassSubjects")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.GradeHead", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Grade", "Grade")
                        .WithMany("GradeHeads")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_Grade_GradeHeads")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.StaffMember", "StaffMember")
                        .WithMany("HeadingGrades")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffMember_HeadingGrades")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.GradeSubject", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Grade", "Grade")
                        .WithMany("GradeSubjects")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_Grade_GradeSubjects")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Subject", "Subject")
                        .WithMany("GradeSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Subject_GradeSubjects")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.LeavingCertificate", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Student", "Student")
                        .WithMany("LeavingCertificates")
                        .HasForeignKey("StudId")
                        .HasConstraintName("FK_StudentLeavingCertificate")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Menu", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Menu", "ParentMenu")
                        .WithMany("InverseParentMenu")
                        .HasForeignKey("ParentMenuId")
                        .HasConstraintName("FK_MenuMenu");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OCR_ClassRoom", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.ClassRoom", "ClassRoom")
                        .WithMany("OCR_ClassRooms")
                        .HasForeignKey("CR_Id")
                        .HasConstraintName("FK_ClassRoom_OCR_ClassRooms")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.OnlineClassRoom", "OnlineClassRoom")
                        .WithMany("PhysicalClassRooms")
                        .HasForeignKey("OCR_Id")
                        .HasConstraintName("FK_OnlineClassRoom_OCR_ClassRooms")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OCR_Teacher", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.OnlineClassRoom", "OnlineClassRoom")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("OCR_Id")
                        .HasConstraintName("FK_OnlineClassRoom_ClassTeachers")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.StaffMember", "ClassTeacher")
                        .WithMany("OCR_Teachers")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_ClassTeacher_OCR_Teachers")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OC_Meeting", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.OnlineClass", "OnlineClass")
                        .WithMany("OC_Meetings")
                        .HasForeignKey("OC_Id")
                        .HasConstraintName("FK_OnlineClass_OC_Meetings")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OC_MeetingAttendee", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.OC_Meeting", "OC_Meeting")
                        .WithMany("OC_MeetingAttendees")
                        .HasForeignKey("OC_MeetingId")
                        .HasConstraintName("FK_OC_Meeting_OC_MeetingAttendees")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OnlineClass", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.OnlineClassRoom", "OnlineClassRoom")
                        .WithMany("OnlineClasses")
                        .HasForeignKey("OCR_Id")
                        .HasConstraintName("FK_OnlineClassRoom_OnlineClasses")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.OCR_Teacher", "OCR_Teacher")
                        .WithMany("OnlineClasses")
                        .HasForeignKey("OCR_TeacherId")
                        .HasConstraintName("FK_OCR_Teacher_OnlineClasses")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.OnlineClassRoom", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Grade", "Grade")
                        .WithMany("OnlineClassRooms")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_Grade_OnlineClassRooms")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Subject", "Subject")
                        .WithMany("OnlineClassRooms")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Subject_OnlineClassRooms")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.PermissionGradeAccess", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Grade", "Grade")
                        .WithMany("PermissionGradeAccesses")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_Grade_PermissionGradeAccesses")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Permission", "Permission")
                        .WithMany("PermissionGradeAccesses")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_Permission_PermissionGradeAccesses")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.PermissionMenuAccess", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Menu", "Menu")
                        .WithMany("PermissionMenuAccesses")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_Menu_PermissionMenuAccesses")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Permission", "Permission")
                        .WithMany("PermissionMenuAccesses")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_Permission_PermissionMenuAccesses")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.SectionHead", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Section", "Section")
                        .WithMany("SectionHeads")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Section_SectionHeads")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.StaffMember", "StaffMember")
                        .WithMany("HeadingSections")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffMember_HeadingSections")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StaffMember", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Teacher", "Teacher")
                        .WithOne("StaffMember")
                        .HasForeignKey("StudentInformationSystem.Data.Models.StaffMember", "TeacherId");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StudentBasketSubject", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Student", "Student")
                        .WithMany("StudentBasketSubjects")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Student_StudentBasketSubjects")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Subject", "Subject")
                        .WithMany("StudentBasketSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Subject_StudentBasketSubjects")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StudentExtraActivityAcheivement", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.ExtraActivityAcheivement", "Acheivement")
                        .WithMany("Students")
                        .HasForeignKey("AcheivementId")
                        .HasConstraintName("FK_Acheivement_Students")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Student", "Student")
                        .WithMany("ActivityAcheivements")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Student_ActivityAcheivements")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StudentExtraActivityPosition", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.ExtraActivityPosition", "Position")
                        .WithMany("Students")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_Position_Students")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Student", "Student")
                        .WithMany("ActivityPositions")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Student_ActivityPositions")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StudentFamily", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Student", "Student")
                        .WithMany("StudentFamilies")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentStudFamily")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.StudentSibling", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Student", "SiblingStudent")
                        .WithMany("StudentSiblings")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Stud_StudSibling")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Subject", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.SubjectCategory", "SubjectCategory")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectCategoryId")
                        .HasConstraintName("FK_SubjectCategory_Subjects")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Section", "Section")
                        .WithMany("Teachers")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Section_Teachers")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.TeacherPreferedSubject", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Subject", "Subject")
                        .WithMany("TeacherPreferedSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Subject_TeacherPreferedSubjects")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeacherPreferedSubjects")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Teacher_TeacherPreferedSubjects")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.TeacherQualification", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeacherQualifications")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Teacher_TeacherQualifications")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.TeacherQualificationSubject", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Subject", "Subject")
                        .WithMany("TeacherQualificationSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Subject_TeacherQualificationSubjects")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.TeacherQualification", "TeacherQualification")
                        .WithMany("TeacherQualificationSubjects")
                        .HasForeignKey("TeacherQualificationId")
                        .HasConstraintName("FK_TeacherQualification_TeacherQualificationSubjects")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.User", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.StaffMember", "StaffMember")
                        .WithOne("User")
                        .HasForeignKey("StudentInformationSystem.Data.Models.User", "StaffId");

                    b.HasOne("StudentInformationSystem.Data.Models.Visitor", "Visitor")
                        .WithOne("User")
                        .HasForeignKey("StudentInformationSystem.Data.Models.User", "VisitorId");
                });

            modelBuilder.Entity("StudentInformationSystem.Data.Models.UserPermission", b =>
                {
                    b.HasOne("StudentInformationSystem.Data.Models.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_Permission_UserPermissions")
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Data.Models.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_UserPermissions")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
